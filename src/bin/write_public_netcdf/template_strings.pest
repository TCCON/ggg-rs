// The strings in the configuration file can have things to replace in them.
// A simple example would be:
//
//   0.2095*column_{name}/column_o2
//
// which means 'use this string with the private variable name inserted where {name}' is.
// More complicated is if we wanted to trim something from the name, then we would have:
//
//   0.2095*column_{trim(name, 'x', '')}/column_o2
//
// to remove "x" from the start of the name, and nothing from the end.

// Can't use the special WHITESPACE rule, because that causes whitespace
// after replacements to be lost
WS = _{" "*}

// We consider a literal part of the string (i.e. not a thing to replace)
// to be any characters except a curly brace. It must be atomic (the leading @)
// to include spaces.
literal_part = @{ (!("{" | "}") ~ ANY)+ }

// An identifier (variable or function) must start with a letter, but then can have letters or numbers
identifier = { ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }

// A string literal argument starts and ends with a single or double quote
// and has any other character in it. These must be atomic to include whitespace.
sq = _{"'"}
single_quote_str = @{ ( !"'" ~ ANY )* }
double_quote_str = @{ "\"" ~ ( "\"" ~ ANY )* ~ "\"" }

// Function args start and end with parentheses and have a sequence
// of identifiers or strings separated by commas. There can be an 
// extra comma at the end, that's fine.
arg_sep = _{","}  // silent because we don't need to handle them on the parser side, just see they are there.
arg = { identifier | sq ~ single_quote_str ~ sq | double_quote_str }
function_args = { "(" ~ WS ~ arg ~ WS ~ (arg_sep ~ WS ~ arg ~ WS)* ~ arg_sep? ~ ")" }
function = { identifier ~ function_args }

// A replacement will be something in curly braces, either a lone identifier
// or a function
replacement = { "{" ~ ( function | identifier ) ~ "}" }

// Our overall "attribute" will be a sequence of replacements or literal parts
attribute = { (replacement | literal_part)* }